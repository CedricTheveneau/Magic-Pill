---
description: 
globs: 
alwaysApply: true
---
# npm package Generation Cursor Rules
# Language: NextJS with TYpeScript
# Project Type: npm package (component)
# Target Directory: src/
# Guiding Principles: Clean Code, SOLID, DRY, Readability-first, Strong Typing

## Foreword  
The logic behind this project is to create a highly customizable, easy to use and to maintain component for React/NextJS based projects. It must also be compatible with non-TypeScript (JavaScript) projects, to be available to a broader audience.
We write the code dedicated to the npm package at the root and in the `src/` directory and always follow the same pattern.

## Directory Structure

### Root directory

- We create and maintain a `README.md` file before doing any release
- We create and update the `package.json` file's version before each release, following the [semver](mdc:https:/semver.org/lang/fr) model
- We create update the `CHANGELOG.md` file before each release, following the [keep a changelog](mdc:https:/keepachangelog.com/en/1.1.0) model
- We create and maintain a `.gitignore` file with at least `/dist` and `/node_modules` in it
- We create and maintain a `.npmignore` file with each directory containing a NextJS app and `/node_modules` in it
- We create and maintain a `.babelrc` file if it doesn't exist
- We create an empty `.nojekyll` for GitHub pages when deplying a demo app
- We create and maintain an `src/` directory containing all the code for our npm package - more info in "### src directory"

### src directory

- We create an `index.d.ts` for compatibility with TypeScript projects
- We create all necessary files, following a clean architecture as mentioned in [general.mdc](mdc:.cursor/rules/general.mdc)
**I try to put focus on package size, code efficiency and simplicity, as well as great architure management that follows the size of the project. Respect that at all costs.**

## Code architecture

- As we're building small packages, we don't need high complexity. No need to build the most perfect architecture with contexts for everything if we only manage a single component.
**Make it so the code makes sense and actually is adapted to the complexity of the overall project.**

### Components & their children
- Purpose: Is the core of the feature we're developping and must only contain the bare minimum. All minute details about this component are managed at atomic scale with child components.
- Important: Always keep the scope of functions and props to the bare minimum. The goal is not to get cluttered components.
- Example: A function that only serves my **notification child component** of **Magic Pill** should be located in the **notification component, not the parent**.
- **Notification.tsx**
  - Purpose: Manage the display of notifications through Magic Pill
  - Example:
  ```tsx
  const { icon, message, cta, info } = notification || {};
  const { icon: ctaIcon, label: ctaLabel, link: ctaLink } = cta || {};
  const { title, content, closeLabel } = info || {};

  const [collapsed, setCollapsed] = useState(true);
  ```

- **types/**
  - Purpose: Centralized TypeScript interfaces and types
  - Rules:
    - Use descriptive, strongly-typed interfaces (e.g., Notification, Navbar) based on entities provided
    - Avoid any type; prefer explicit typing
    - Export only complete types for usage across the project. All subtypes, if not necessary outside of broader type definitions shouldn't be exported.
  - Examples:
    **Non-exported type**
    ```typescript
    /**
     * Defines the structure of a Magic Pill notification CTA with a link.
     * @example
     * ```ts
     * {
     *   icon: "info",
     *   label: "Learn More",
     *   link: "/learn-more"
     * }
     * ```
     * @see {@link MagicPillNotificationWithLink} for the whole notification structure that incorporates this very type..
     */
    interface MagicPillNotificationCTAWithLink {
     icon: string;
     label?: string;
     link: string;  // mandatory
    }
    ```
    **Exported type**
    ```typescript
    export type MagicPillNotification =
    | MagicPillNotificationWithLink
    | MagicPillNotificationWithoutLink
    | MagicPillNotificationBase;
    ```

### utils/
- Purpose: Centralize logic that is reused in several files to avoid repeating code (DRY principle) and make it simpler to maintain. It also helps keeping functions simple and pure, without adding specific treatment to their logic, thus avoiding unwanted side effects.
- It's important, just like with components and their children to subdivide utils into files depending on where it is used. Generic utils can go into a `${mainComponentName}.ts` file, while tighter scope utils go into a `${subcomponentName}.ts` file.
- Example: Definition of CTA icon, update of data fields, etc.
- **icons.ts**
  - Purpose: Returns the icon from the selected array of icons, based on the requested icon
  - Rules:
    - Follow Single Responsibility Principle (only returns the icon we're asking for)
    - Use Singleton pattern
    - Strongly typed data
  - Example:
    ```typescript
    export function getIconComponent(iconName: string, iconsMap: Record<string, React.ComponentType<any>>) {
      if (!iconName) return null;
      return iconsMap[iconName] || null;
    }
    ```

### __tests__/
- Purpose: Ensure the correctness, reliability, and maintainability of the package through unit and integration tests.
- Rules:
  - Use Jest as the testing framework.
  - Separate unit tests and integration tests (e.g., unit/ and integration/ subdirectories if needed).
  - Mock external dependencies (e.g., API calls, database interactions) using Jest mocks and the library @faker-js/faker.
  - Cover edge cases and error handling scenarios.
  - Follow the AAA (Arrange, Act, Assert) pattern for test readability.
  - Ensure each test is independent and idempotent.
  - Place test files alongside the component being tested, following the naming convention *.test.ts.
  - Examples:
    - components/navbar.test.ts → Tests addition of navlinks, their functionality and makes sure Magic Pill isn't broken.
    - components/utils/icons.test.ts → Tests the icons mapping and handling of edge cases.

### ./
- Purpose: Main configuration and entry points
- **.gitignore**
  - Purpose: Prevents upload of sensible and heavy, non-necessary directories to GitHub
  - Rules:
    - Always ignore `/dist` and `node_modules` at least. Update the file when needed.
- **.npmignore**
  - Purpose: Prevents upload of sensible and heavy, non-necessary directories to npm
  - Rules:
    - Always ignore directories containing NextJS apps at least. Update the file when needed.
- **.nojekyll**
  - Purpose: Facilitates the deployment of NextJS demo apps to GitHub Pages
  - Rules:
    - No need to write anything in the file, all we need is to have it.
- **.babelrc**
  - Purpose: Helps with bundling.
  - Rules:
    - Add a preset that facilitates bundling for NextJS. Update the file when needed.
  - Example:
    ```json
    {
      "presets": ["@babel/preset-react"]
    }
    ```
- **rollup.config.cjs**
  - Purpose: Contains the setup for bundling the npm package
  - Rules:
    - Add a preset that facilitates bundling for NextJS. Update the file when needed.
  - Typical example:
    ```cjs
    const babel = require('@rollup/plugin-babel').default;
    const { terser } = require('rollup-plugin-terser');
    const pkg = require('./package.json');
    const postcss = require('rollup-plugin-postcss');

    module.exports = () => {
      return {
        input: 'src/MagicPill.js',
        output: [
          {
            file: pkg.main,
            format: 'cjs',
            sourcemap: true,
          },
          {
            file: pkg.module,
            format: 'esm',
            sourcemap: true,
          },
        ],
        plugins: [
          babel({
            exclude: 'node_modules/**',
            babelHelpers: 'bundled',
            presets: [
              '@babel/preset-env',
              '@babel/preset-react'
            ]
          }),
          postcss({
            extract: 'magicpill.css',
            minimize: true,
          }),
          terser(),
        ],
        external: ['react', 'react-dom', 'next'],
      };
    };
    ```
- **README.md**
  - Purpose: Gives detailed information regarding the project, how to set it up and use it
  - Rules:
    - When significatn changes have been done to the project, check if the `README.md` file needs an update. If it does, update it.
    - It's important to keep it structured and clear, as it's the primary document user will go through regarding the project.
- **CHANGELOG.md**
  - Purpose: Keeps track of all changes in the project. Helps with versioning and communicating on updates
  - Rules:
    - Always keep this file up to date before releasing a new version of the package.
    - We follow the [keep a changelog](https://keepachangelog.com/en/1.1.0/) model, with [SemVer](https://semver.org/lang/fr/) versioning model
- **LICENSE.md**
  - Purpose: Notify to users what they **can** and **can't** do with this package.
  - Rules:
    - Never change this file.
    - Notify me if this file is missing so I can add it to the project.
- **NOTICE.md**
  - Purpose: Notify to users that **copyright applies to the whole project or parts of it**
  - Rules:
    - Never change this file.
    - Notify me if this file is missing so I can add it to the project.
- **package.json**
  - Purpose: Keeps track of dependencies and script we can run regarding the projet
  - Rules:
    - We try to keep it as simple as possible, especially in terms of dependencies, as mentionned before regarding keeping the project simple and lightweight
    - We add deployment and CI/CD related scripts to it to facilitate releases. Update the file when needed.
    - Always ask me before chosing to install dependencies. Explain to me why you picked installing a dependency instead of writting code.
- **package-lock.json**
  - Purpose: Keeps tracks of dependencies and script we can run regarding the projet
  - Rules:
    - Never change this file.