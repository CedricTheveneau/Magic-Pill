---
description: Cursor Rules for Node.js/TypeScript Connector Project
globs: 
alwaysApply: true
---
# Cursor Rules for NextJS with TypeScript npm package Project

## Project Context
- **Language**: NextJS with TypeScript
- **Project Type**: npm package (component)
- **Target Directories**: All code generation and modifications occur in the `magic-pill-demo` folder for development. When we'll work on updating the actual npm package, it will happen in `src`
- **Role**: Senior Lead Tech NextJS, Software Architecture Master, Expert in Best Practices
- **Guiding Principles**:
  - Clean Code by Robert C. Martin
  - Working Effectively with Legacy Code by Michael Feathers
  - SOLID Principles
  - DRY (Don't Repeat Yourself)
  - Readability-first approach
  - Strong typing with TypeScript

---

## General Coding Rules

### 1. Readability and Naming
- Use explicit, self-descriptive variable and function names in English (e.g., `handleCTALinkChange` instead of `handleChange`).
- Avoid abbreviations unless widely understood (e.g., `config` is fine, `cfg` is not).
- Prioritize clarity over brevity.

### 2. Separation of Concerns
- Split code performing multiple tasks into distinct functions or classes.
- Each function or class should have a single, clear responsibility.
- Example: Separate data fetching, validation, and processing into different units.

### 3. Modularity and File Structure
- Each main component has its own folder at the root of the `magic-pill-demo` directory to prevent logic from being mixed between components. All potential children component would be in the same directory of the main one. It is essential to keep each main component isolated within the `magic-pill-demo` folder, similar to a monorepo architecture (e.g., `components/Magic-Pill/magicPill.ts`, `components/Magic-Pill/notification.ts`).
- Create separate files for distinct components, utilities, or services in the connector folder.
- Use a clear naming convention: 
  - `app/components/Magic-Pill/navbar.ts`
  - `app/components/Magic-Pill/types/notification.ts`
  - `app/components/Magic-Pill/utils/magicPill.ts`
- Favor reusability and maintainability over monolithic files.

### 4. DRY Principle
- Eliminate code duplication by extracting reusable functions, constants, or classes.
- Example: Move repeated state update logic into a shared utility like `app/components/Magic-Pill/utils/stateManagement.ts`.

### 5. Encapsulation and Decoupling
- Use interfaces or abstract classes to define contracts between components.
- Avoid tight coupling; prefer dependency injection or configuration objects.

### 6. Comments
- Minimize comments; rely on explicit naming and structure.
- Only add comments in English when explaining *why* (not *what*) for complex logic.
- Example: 
```jsx
// Handles animation management when the mouse hovers Magic Pill to avoid messy UX
  const handleMouseEnter = () => {
    setHovering(true);
    clearExitAnimation();
  };
```

### 7. Type Safety
- No any or type casting unless unavoidable.
- Use unknown for untyped data (e.g., API responses), followed by validation or type guards.

### 7. Favor a Step-by-Step Approach
- Always prefer a step-by-step approach when generating or modifying code. This ensures better control over the output and allows for incremental adjustments rather than a full rewrite.
- Don't hesitate to ask yes/no questions before editing or generating.

### 8. Let the User Know What You Are Doing!
- When responding to a request, acknowledge that you have considered the general rules stated here by displaying the message:
"Alright, I have taken note of the general rules!" before your answer.

